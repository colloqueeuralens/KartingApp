#!/bin/bash

# Script de d√©ploiement KMRS Racing sur VPS
# Usage: ./deploy-vps.sh [domain] [vps_ip]

set -e

DOMAIN=${1:-"kmrs-racing.eu"}
VPS_IP=${2:-""}
API_DOMAIN="api.$DOMAIN"

echo "üöÄ D√©ploiement KMRS Racing VPS"
echo "Domain: $DOMAIN"
echo "API Domain: $API_DOMAIN"

# V√©rifications pr√©alables
if [ -z "$VPS_IP" ]; then
    echo "‚ùå Usage: $0 <domain> <vps_ip>"
    echo "Exemple: $0 kmrs-racing.eu 123.456.789.10"
    exit 1
fi

echo "üìã V√©rification des pr√©requis..."

# V√©rifier que Docker est install√© sur le VPS
ssh root@$VPS_IP "docker --version" > /dev/null || {
    echo "‚ùå Docker n'est pas install√© sur le VPS"
    echo "Installer Docker avec: curl -fsSL https://get.docker.com | sh"
    exit 1
}

# V√©rifier que Docker Compose est install√©
ssh root@$VPS_IP "docker compose version" > /dev/null || {
    echo "‚ùå Docker Compose n'est pas install√© sur le VPS"
    exit 1
}

echo "‚úÖ Pr√©requis valid√©s"

# Cr√©er le r√©pertoire de l'application sur le VPS
echo "üìÅ Pr√©paration de l'environnement VPS..."
ssh root@$VPS_IP "mkdir -p /opt/kmrs-racing/{nginx,logs,backups,ssl}"

# Copier les fichiers de configuration
echo "üì§ Upload des fichiers de configuration..."
scp docker-compose.production.yml root@$VPS_IP:/opt/kmrs-racing/docker-compose.yml
scp nginx/nginx.conf root@$VPS_IP:/opt/kmrs-racing/nginx/
scp nginx/api.conf root@$VPS_IP:/opt/kmrs-racing/nginx/
scp .env.production.example root@$VPS_IP:/opt/kmrs-racing/.env.example

# Copier le Dockerfile et les sources
echo "üì§ Upload du code source..."
scp -r ../app root@$VPS_IP:/opt/kmrs-racing/
scp ../Dockerfile root@$VPS_IP:/opt/kmrs-racing/
scp ../requirements.txt root@$VPS_IP:/opt/kmrs-racing/

# Configuration SSL avec Let's Encrypt
echo "üîí Configuration SSL Let's Encrypt..."
ssh root@$VPS_IP << EOF
cd /opt/kmrs-racing

# G√©n√©rer le certificat SSL initial
docker run --rm -v /etc/letsencrypt:/etc/letsencrypt -v /var/www/certbot:/var/www/certbot certbot/certbot certonly --webroot --webroot-path=/var/www/certbot --email admin@$DOMAIN --agree-tos --no-eff-email -d $API_DOMAIN

# Configuration du renouvellement automatique
echo "0 12 * * * /usr/bin/docker run --rm -v /etc/letsencrypt:/etc/letsencrypt -v /var/www/certbot:/var/www/certbot certbot/certbot renew --quiet" | crontab -
EOF

# Configuration de l'environnement
echo "‚öôÔ∏è Configuration de l'environnement..."
ssh root@$VPS_IP << EOF
cd /opt/kmrs-racing

# Cr√©er le fichier .env de production
if [ ! -f .env ]; then
    cp .env.example .env
    
    # G√©n√©rer des mots de passe s√©curis√©s
    POSTGRES_PASSWORD=\$(openssl rand -base64 32)
    REDIS_PASSWORD=\$(openssl rand -base64 32)
    
    # Remplacer les valeurs dans .env
    sed -i "s/CHANGE_ME_STRONG_PASSWORD/\$POSTGRES_PASSWORD/g" .env
    sed -i "s/CHANGE_ME_REDIS_PASSWORD/\$REDIS_PASSWORD/g" .env
    sed -i "s/admin@kmrs-racing.eu/admin@$DOMAIN/g" .env
    
    echo "‚úÖ Fichier .env cr√©√© avec mots de passe s√©curis√©s"
else
    echo "‚ö†Ô∏è Fichier .env existe d√©j√†, pas de modification"
fi
EOF

# Build et d√©marrage des conteneurs
echo "üê≥ Build et d√©marrage des conteneurs Docker..."
ssh root@$VPS_IP << EOF
cd /opt/kmrs-racing

# Build de l'image
docker compose build --no-cache

# D√©marrage des services
docker compose up -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

# V√©rifier que les services sont en cours d'ex√©cution
docker compose ps

# Test de sant√© de l'API
if curl -f https://$API_DOMAIN/health > /dev/null 2>&1; then
    echo "‚úÖ API accessible sur https://$API_DOMAIN"
else
    echo "‚ö†Ô∏è API pas encore accessible, v√©rifier les logs: docker compose logs"
fi
EOF

# Configuration du firewall
echo "üî• Configuration du firewall..."
ssh root@$VPS_IP << EOF
# Installer UFW si pas install√©
apt-get update && apt-get install -y ufw

# Configuration firewall
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

echo "‚úÖ Firewall configur√©"
EOF

# Configuration des sauvegardes automatiques
echo "üíæ Configuration des sauvegardes..."
ssh root@$VPS_IP << EOF
# Script de sauvegarde PostgreSQL
cat > /opt/kmrs-racing/backup.sh << 'BACKUP_EOF'
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
docker exec kmrs_postgres pg_dump -U kmrs_user kmrs_racing > /opt/kmrs-racing/backups/backup_\$DATE.sql
find /opt/kmrs-racing/backups -name "backup_*.sql" -mtime +30 -delete
BACKUP_EOF

chmod +x /opt/kmrs-racing/backup.sh

# Programmer la sauvegarde quotidienne
echo "0 2 * * * /opt/kmrs-racing/backup.sh" | crontab -

echo "‚úÖ Sauvegardes automatiques configur√©es"
EOF

# Tests finaux
echo "üß™ Tests de d√©ploiement..."

# Test API
if curl -f https://$API_DOMAIN/health > /dev/null 2>&1; then
    echo "‚úÖ API Health Check: OK"
else
    echo "‚ùå API Health Check: FAILED"
fi

# Test CORS
CORS_TEST=$(curl -s -H "Origin: https://$DOMAIN" -H "Access-Control-Request-Method: GET" -X OPTIONS https://$API_DOMAIN/ | grep -i "access-control-allow-origin" || echo "")
if [ ! -z "$CORS_TEST" ]; then
    echo "‚úÖ CORS Configuration: OK"
else
    echo "‚ùå CORS Configuration: FAILED"
fi

echo ""
echo "üéâ D√©ploiement termin√©!"
echo ""
echo "üìã Informations de d√©ploiement:"
echo "‚Ä¢ API Backend: https://$API_DOMAIN"
echo "‚Ä¢ WebSocket: wss://$API_DOMAIN/ws"
echo "‚Ä¢ Health Check: https://$API_DOMAIN/health"
echo ""
echo "üì± Configuration Frontend:"
echo "‚Ä¢ Domaine principal: https://$DOMAIN (Firebase Hosting)"
echo "‚Ä¢ URL Backend: https://$API_DOMAIN"
echo ""
echo "üîß Commandes utiles:"
echo "‚Ä¢ Logs: ssh root@$VPS_IP 'cd /opt/kmrs-racing && docker compose logs'"
echo "‚Ä¢ Restart: ssh root@$VPS_IP 'cd /opt/kmrs-racing && docker compose restart'"
echo "‚Ä¢ Update: ssh root@$VPS_IP 'cd /opt/kmrs-racing && docker compose pull && docker compose up -d'"
echo ""
echo "‚ö†Ô∏è N'oubliez pas de:"
echo "1. Configurer les DNS: $DOMAIN ‚Üí Firebase, $API_DOMAIN ‚Üí $VPS_IP"
echo "2. Deployer le frontend sur Firebase avec la nouvelle config"
echo "3. Tester la synchronisation web ‚Üî mobile"