version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: karting_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-timing_db}
      POSTGRES_USER: ${POSTGRES_USER:-timing_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-timing_user} -d ${POSTGRES_DB:-timing_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - karting_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: karting_redis_prod
    expose:
      - "6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - karting_network
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # FastAPI backend
  api:
    build: .
    container_name: karting_api_prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-timing_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-timing_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
      - ./logs:/app/logs
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - karting_network

  # NGINX reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: karting_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - karting_network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: karting_backup_prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-timing_db}
      - POSTGRES_USER=${POSTGRES_USER:-timing_user}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    depends_on:
      - postgres
    restart: "no"
    networks:
      - karting_network
    profiles:
      - backup

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  karting_network:
    driver: bridge